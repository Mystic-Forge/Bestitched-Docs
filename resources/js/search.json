[[{"l":"Bestitched","p":["Rogue-like survival game where you start in a chunk of land with nothing but an unpowered portal. You start with an exploration token. Each time you spend an exploration token to uncover a new chunk of land a wave on enemies will spawn from the boundaries of the explored map. Uncovering land is required to locate generators and shops. Generators need to be connected to the portal to progress. Shops will provide new items and buffs to help with the waves of enemies."]},{"l":"Prototype Roadmap","p":["Audio System","Build mode","Building resources","Collectable resources","Combat","Death","Enemies","Fog of war","Item pickup","Player controller","Portal at spawn","Procedural chunk generation","Profiling system","Random generators","Structure generation","Wires, conveyors, pipes, etc...","Working portal"]},{"l":"Bugs","p":["Spamming attack keeps arm up for a long time","Targetting self causes big problem","Sometimes the fog looks super broken :("]}],[{"i":"context--conditions","l":"Context & Conditions","p":["When writing Selection Tables you may run into situation where you only want a drop to happen under specific circumstances. That's where the concept of context and conditions comes in. A context is basically a big list of values that can be accessed with keys.","We'll start with an example of where a conditon could be used:","As could be inferred, the cooked variant of the item will drop only if the interaction added \"fire\" to the \"Attributes\". But what are Attributes, and what are these keywords INCLUDES and EXCLUDES? For the rest of this page there will be no surrounding toml and examples will be given as the string value of the condition. Just remember that a condition is a string literal (something wrapped in 'single quotes') that follows a field condition = ."]},{"l":"Context","p":["Context is dependant on where the selection table is being drawn from. If the table is being used when an entity drops items on death then it will have a bunch of context values associated with entity death. All possible contexts will be outlined here.","Each context table promises that the keys listed will be there."]},{"l":"Context Tables"},{"l":"Entity Death","p":["Key","Value Type","Description","Attributes","string[]","Various keywords relating to the death.","DeathReason","An series of flags describing the reason for the entities death."]},{"l":"Operators","p":["-","!=","*","/","%","+","<","<=","<any[]> EXCLUDES","<any[]> INCLUDES","<int, float> - <int, float>","<int, float> * <int, float>","<int, float> / <int, float>","<int, float> % <int, float>","<int, float> + <int, float>","<int, float> < <int, float>","<int, float> <= <int, float>","<int, float> > <int, float>","<int, float> >= <int, float>","==",">",">=","Add the left side value to the right side value.","AND","Check if 2 values are not the same.","Check if 2 values are the same.","Check if both the left and right side are true.","Check if either the left or the right side is true.","Check if the left side array contains the right side value.","Check if the left side array does not contain the right side value.","Check if the left side value is greater than or equal to the right side value.","Check if the left side value is greater than the right side value.","Check if the left side value is less than or equal to the right side value.","Check if the left side value is less than the right side value.","Description","Divide the left side value by the right side value.","EXCLUDES","Get the remainder of the left side value divided by the right side value.","INCLUDES","Multiply the left side value by the right side value.","Operator","OR","Subtract the right side value from the left side value.","Usage"]},{"l":"Types"},{"l":"DeathReason","p":["A death reason is a series of flags that describe the reason for an entities death. The following flags are available:| Flag| Description|| -------- | ----------------------------- || ByEntity | Caused directly by an entity. || ByTile | Caused directly by a tile. || ByPlayer | Caused directly by a player. |"]}],[{"l":"Selection Table"},{"l":"Basic drop definition","p":["The text in the brackets is the item id. For items outside of the Bestitched package, you will need quotes to allow for the colon."]},{"l":"Defaults"},{"l":"Global fields","p":["All of the possible fields relating to the selection table as a whole."]},{"l":"Drop Count","p":["This defines how many random pulls will be made from the selection table.","Drop Count can also be defined with range syntax or list syntax."]},{"l":"Drop Fields","p":["All of the possible fields relating to a drop entry in the selection table."]},{"l":"Weight","p":["Assuming always_drop is false or not defined, this will act as the chance of this drop being selected."]},{"l":"Always drop","p":["If defined as true, this drop will always happen and will not consume a drop."]},{"l":"Count","p":["Defines the amount of this item that will be grabbed if this item is grabbed.","Count can also be defined with range syntax or list syntax."]},{"l":"Stock","p":["This defines how many times this item can be randomly picked from the selection table.","At the start of a draw, all items (excluding those defining always_drop as true) are added to a 'bag' stock number of times.","Importantly, this does not effect the chance of the item being drawn. You can have 10,000 bananas and 1 apple but both are equally likely to be drawn.","Once an item has been drawn (either by the grabber, by groups, or by triggers) as many times as it's stock allows, it will never be drawn again (even if it's group is triggered).","This field can not use any special syntax."]},{"l":"Cost","p":["With a default of 0, this field can be ignored in most cases. It is used as a way to 'spend' a balance when selecting a table of things. This is mostly used in the context of enemy wave spawning, but it can be used in other places too. For this example, we'll show it in the context of spawning enemies. Starting with a basic table file:","Let's suppose you're spawning a wave of slimes. Passed into the Draw method will be a 'balance' which will represent the difficulty of the wave to spawn. If that difficulty is over 20 then there will be a chance to spawn a slime_boss. For each grab, the cost of the grab is subtracted from the balance. This repeats until you either run out of drops or you run out of balance."]},{"l":"Groups","p":["When an item with groups is grabbed, all items that share a group are grabbed at the same time. This only consumes 1 grab.","Importantly, groups do not trigger chain reactions. If coin was grabbed then it would also grab soul, but soul's groups are not then grabbed too, so bone is not grabbed."]},{"l":"Triggers","p":["A trigger is a one way group. It will cause everything in the specified group ids to be grabbed, but does not say anything about what group the item is in.","If bone is grabbed then it triggers group 0 and grabs coin. If coin is grabbed, it also triggers group 0, but since bone is not in that group it does nothing.","A trigger can also be defined as a table with more properties for finer control. This adds 2 aditional fields, those being the count and condition fields. Starting with count as it is the simplest to understand:","The above trigger will choose a range of 1 to 3 drops that are within the groups 0 and 3. Importantly, this is influenced by the individual drops weights.","condition is a much more technical field and will only be shown with a surface level example here.","As you may be able to figure out from the example, this trigger will only fire if something called \"Attributes\" contains \"fire\". The specifics of this are beyond the scope of this page, to learn more about conditions you can check out Context & Conditions"]},{"l":"Other stuff"},{"l":"Range Syntax","p":["Defienes an integer randomly chosen within the range min..max."]},{"l":"List Syntax","p":["Defines an integer randomly chosen from a list n1,n2,n3"]},{"l":"Chance Object","p":["To be used in place of Ranges or Lists, this alters the behaviour of integer functions and extends their capabilities. As it stands, there is only 1 possible extension.","Below is a basic use of a Chance Object:","As it may be clear, this count will evaluate to a range between 0 and 5. However, unlike the Range Syntax, this range is weighted to give lower values more frequently than higher values. A chance below 1 will weigh towards the lower bound and a chance above 1 weighs towards the upper bound. A chance of exactly 1 means equal probability across all values. The bounds are never exceeded."]}],[{"l":"Tile Definition","p":["A tile definition is a toml file that defines a tile. The name of the toml file is the Id of the tile."]},{"l":"Basic tile definition","p":["The above file describes a basic tile with the material stone. The type field is used to determine which script to use. The fields table is where all the type specific fields are defined. In this example, the basic type has a single field material."]},{"l":"Tile Types","p":["Below is a list of all the tile types and their fields.","Shared fields:| Field| Type| Description|| --------- | -------- | ------------------------------ || multi_tile_offsets | int[3][] | The offsets for the segments of a multi-tile. E.g: [[0, 1, 0], [0, 2, 0]]|"]},{"l":"Basic","p":["id: basic","A basic tile is a simple voxel tile. You cannot change its mesh, but you can change the material that it uses.| Field| Type| Description|| --------- | -------- | ------------------------------ || material | Id | The Id of the material to use. |"]},{"l":"Cardinal","p":["id: cardinal","A cardinal tile takes a single mesh and provides 4 states, one for each cardinal direction.| Field| Type| Description|| --------- | -------- | ------------------------------ || material | Id | The Id of the material to use. || mesh | Id | The Id of the mesh to use. |"]},{"l":"Breakable Decoration","p":["A breakable decoration is like a cardinal tile in that it can be rotated, but it also has a health state.","An array of Ids with the length equal to how much health the tile has. Each index directly corresponds to a health state. Index 0 is health 1, index 1 is health 2, etc...","damage_state_meshes","Description","Field","Id","id: breakable_decoration","Id[health]","int","loot_table","material","max_health","The amount of damage this tile can sustain.","The Id of the loot table to use when the tile is destroyed.","The Id of the material to use.","Type"]},{"l":"Field Types"}],[{"l":"Enemy spawning","p":["Idly as fog is unveiled","When enough fog is unveiled a wave spawns","Every so often a wave will spawn","Enemies spawn away from you idly"]}],[{"l":"Environmental Conditions"},{"l":"Night time","p":["You'll need lighting infrastructure to progress outwards."]},{"l":"Rain","p":["Movement is slowed.","Perhaps some unique enemies?"]},{"l":"Quicksand"}],[{"l":"Events"},{"l":"Earthquakes","p":["Structures will be damaged or destroyed at random"]},{"l":"Lightning"},{"l":"Horde"},{"l":"Solar Eclipse"}],[{"l":"Recipes"},{"l":"Conveyor belt","p":["Transports items.","1 Wood","1 Thread"]},{"l":"Soul pipes","p":["Transports soul","1 Cog"]},{"l":"Soulflame torch","p":["Takes soul and produces light, uncovering fog.","1 Wood","1 Soul"]},{"l":"Small Lamp","p":["Takes power through pilons and produces light, uncovering mroe fog than a soulflame torch.","3 Wood","1 Crystal"]},{"l":"Power Generator","p":["Takes soul through pipes and produces electricity that can be connected with pilons"]}],[{"l":"Resources"},{"l":"Buttons","p":["A generic drop from most structures and enemies. Used as currency"]},{"l":"Soul","p":["A fuel source for various structures."]},{"l":"Thread","p":["A generic building resource."]},{"l":"Wood"},{"l":"Cogs"},{"l":"Crystal"}],[{"l":"Structures"},{"l":"Generator","p":["A random structure uncovered while exploring land. A generator could generate any generic resource, like electricity, water, metal, etc..."]},{"l":"Portal","p":["A portal is the exit for the current stage, leading to the next area. To go through, you have to give it the visually shown resources by using conveyors or piplines from generators."]}],[{"l":"World Generation","p":["Hello!"]}],[{"l":"Controls","p":["Action","B","Build Menu","Ctrl + L-Click","Ctrl + Scroll","Cycle Selected Enemies","Heavy Attack","Jump","Keybind","L-Click","Light Attack","Move","R-Click","Roll","Select Target","Shift","Space","Tab","Toggle Build Mode","W,A,S,D"]}]]